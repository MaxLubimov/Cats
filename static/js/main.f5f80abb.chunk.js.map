{"version":3,"sources":["store.jsx","CatList.jsx","FavortieList.jsx","index.jsx"],"names":["allPosts","data","type","payload","initState","likedPosts","liked","id","url","event","store","dispatch","likePost","target","classList","toggle","createStore","state","action","newSelecredIds","some","ids","filter","concat","window","__REDUX_DEVTOOLS_EXTENSION__","CatList","this","props","Store","className","map","style","backgroundImage","onClick","value","name","Component","mapDispatch","createPost","connect","FavoriteList","FavoriteListId","length","item","App","useDispatch","useState","fetching","setFetcing","currentPage","setCurrentPage","active","setActive","Selection","setSelection","useEffect","document","addEventListener","scrollHander","removeEventListener","a","fetch","res","prevState","json","response","fetchData","finally","e","documentElement","scrollHeight","scrollTop","innerHeight","toggleContent","currentState","preventDefault","autoFocus","switchContent","rootElement","querySelector","ReactDOM","render"],"mappings":"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","file":"static/js/main.f5f80abb.chunk.js","sourcesContent":["import { createStore } from 'redux'\r\n\r\nconst likePost = (id, url) => {\r\n  return {\r\n    type: 'TOOGLE_LIKE',\r\n    payload: {\r\n      id,\r\n      url,\r\n    }\r\n  };\r\n};\r\n\r\nexport const allPosts = (data) => {\r\n  return {\r\n    type: 'ALLPOSTS',\r\n    payload: {\r\n      data\r\n    }\r\n  };\r\n};\r\n\r\n\r\nconst initState = {\r\n  likedPosts: [],\r\n  allPosts: [],\r\n};\r\n\r\nconst likeRducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case 'TOOGLE_LIKE':\r\n      const newSelecredIds = state.likedPosts.some(ids => ids.id === action.payload.id)\r\n        ? state.likedPosts.filter(ids => ids.id !== action.payload.id)\r\n        : state.likedPosts.concat({\r\n          id: action.payload.id,\r\n          url: action.payload.url\r\n        })\r\n      return {\r\n        ...state,\r\n        likedPosts: newSelecredIds,\r\n      };\r\n    case 'ALLPOSTS':\r\n      return {\r\n        ...state,\r\n        allPosts: state.allPosts.concat(action.payload.data)\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// добавление/удаление поста из стор\r\nexport const liked = (id, url, event) => {\r\n  store.dispatch(likePost(id, url));\r\n  event.target.classList.toggle('unlike');\r\n  event.target.classList.toggle('like')\r\n}\r\n\r\nconst store = createStore(\r\n  likeRducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n)\r\n\r\nexport default store;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { liked, allPosts } from './store'\r\n\r\n// рендер всех котиков\r\nclass CatList extends Component {\r\n  render() {\r\n    const data = this.props.Store.allPosts;\r\n    return (\r\n      <div className=\"container\">\r\n        <ul className=\"cat-cards\">\r\n          {data.map(data => (\r\n            <li\r\n              className=\"cat-card\"\r\n              key={data.id}\r\n              style={{\r\n                backgroundImage: `url(\"${data.url}\")`\r\n              }}\r\n            >\r\n              <input\r\n                onClick={(event) => liked(data.id, data.url, event)}\r\n                type=\"button\"\r\n                className={`heart-img + ${this.props.Store.likedPosts.some(ids => ids.id === data.id) ? 'like' : 'unlike'}`}\r\n                value=\"\"\r\n                name=\"\"\r\n              />\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nconst mapDispatch = {\r\n  createPost: allPosts,\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n    Store: state\r\n  }),\r\n  mapDispatch\r\n)(CatList)\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { liked } from './store';\r\n\r\n// рендер лайкнутых котиков\r\nclass FavoriteList extends Component {\r\n  render() {\r\n    const FavoriteListId = this.props.Store.likedPosts;\r\n    return (\r\n      FavoriteListId.length !== 0\r\n        ?\r\n        <div className=\"container\">\r\n          <ul className=\"cat-cards\">\r\n            {FavoriteListId.map(item => (\r\n              <li\r\n                className=\"cat-card\"\r\n                key={item.id}\r\n                style={{\r\n                  backgroundImage: `url(\"${item.url}\")`\r\n                }}\r\n              >\r\n                <input\r\n                  onClick={(className) => liked(item.id, item.url, className)}\r\n                  type=\"button\"\r\n                  className=\"heart-img like\"\r\n                  value=\"\"\r\n                  name=\"\"\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        : false\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  state => ({\r\n    Store: state\r\n  }),\r\n)(FavoriteList)\r\n","import React, { useState, useEffect } from 'react';\nimport { Provider, useDispatch } from 'react-redux'\nimport ReactDOM from 'react-dom';\nimport CatList from './CatList'\nimport FavoriteList from './FavortieList'\nimport store, { allPosts } from './store'\nimport './index.css';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const [fetching, setFetcing] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1)\n  const [active, setActive] = useState(false)\n  const [Selection, setSelection] = useState('allCats')\n\n  // подписка на скролл\n  useEffect(() => {\n    document.addEventListener('scroll', scrollHander)\n    return function () {\n      document.removeEventListener('scroll', scrollHander)\n    };\n  }, [])\n\n  // загрузка данных + диспатч в стор\n  useEffect(() => {\n    if (fetching) {\n      const fetchData = async () => {\n        let res = await fetch(\n          `https://api.thecatapi.com/v1/images/search?limit=20&page=${currentPage}`\n        );\n        setCurrentPage(prevState => prevState + 1)\n        let response = await res.json();\n        dispatch(allPosts(response));\n      };\n      fetchData().finally(() => setFetcing(false));\n    }\n  }, [fetching]);\n  ;\n\n  // проверка конца страницы\n  const scrollHander = (e) => {\n    if (e.target.documentElement.scrollHeight - (e.target.documentElement.scrollTop + window.innerHeight) < 100) { setFetcing(true) }\n  }\n\n  //тоггл вкладки\n  const toggleContent = (event) => {\n    const currentState = active;\n    event.preventDefault();\n    setSelection(event.target.value)\n    setActive(!currentState)\n  }\n\n  // отображение нужной вкладки\n  const switchContent = (value) => {\n    switch (value) {\n      case 'allCats':\n        return <CatList />;\n      case 'favoriteCats':\n        return <FavoriteList />;\n      default:\n        return null;\n    }\n  }\n\n  return (\n    <>\n      <header className=\"header\" >\n        <div className=\"container\">\n          <div className=\"nav-items\">\n            <button autoFocus className={Selection === 'allCats' ? 'active' : null} value=\"allCats\" onClick={toggleContent} >Все котики</button>\n            <button className={Selection === 'favoriteCats' ? 'active' : null} value=\"favoriteCats\" onClick={toggleContent} >Любимые котки</button>\n          </div>\n        </div>\n      </header >\n      { switchContent(Selection)}\n    </>\n  )\n}\n\nconst rootElement = document.querySelector('#root');\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider >,\n  rootElement);\n\n\n"],"sourceRoot":""}